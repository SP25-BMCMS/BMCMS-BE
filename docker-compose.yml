services:
  rabbitmq:
    image: rabbitmq:4.0.6-management
    container_name: rabbitmq
    hostname: rabbitmq
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    ports:
      - '5672:5672' # AMQP protocol port
      - '15672:15672' # Management UI port
      - '15692:15692' # Prometheus metrics
    env_file:
      - rabbitmq.env
    restart: always
    environment:
      NODE_ENV: production
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
      RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS: '-rabbit log_levels [{connection,info}]'
    command: >
      /bin/bash -c " rabbitmq-plugins enable --offline rabbitmq_management && rabbitmq-server"
    networks:
      - my_network

  redis:
    image: redis:latest
    container_name: my-redis
    restart: always
    ports:
      - '6379:6379'
    networks:
      - my_network
    command: redis-server --protected-mode no

  api_gateway:
    build:
      context: .
      dockerfile: ./apps/api-gateway/Dockerfile
    container_name: api_gateway
    ports:
      - '3000:3000' # API Gateway lắng nghe trên cổng 3000
    networks:
      - my_network
    environment:
      NODE_ENV: production
      RABBITMQ_URL: 'amqp://admin:admin@rabbitmq:5672'
    depends_on:
      - rabbitmq
    restart: always

  users_service:
    build:
      context: ./
      dockerfile: ./apps/users/Dockerfile
    container_name: users_service
    ports:
      - '3001:3001'
    environment:
      NODE_ENV: production
    networks:
      - my_network
    env_file:
      - .env
    restart: always

  buildings_service:
    build:
      context: .
      dockerfile: ./apps/buildings/Dockerfile
    container_name: buildings_service
    ports:
      - '3002:3002'
    networks:
      - my_network
    env_file:
      - .env
    environment:
      NODE_ENV: production
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_USER: admin
      RABBITMQ_PASS: admin
    restart: always
    depends_on:
      - rabbitmq # ✅ Đảm bảo RabbitMQ chạy trước

  cracks_service:
    build:
      context: .
      dockerfile: ./apps/cracks/Dockerfile
    container_name: cracks_service
    ports:
      - '3003:3003'
    env_file:
      - .env
    depends_on:
      - rabbitmq # ✅ Đảm bảo RabbitMQ chạy trước
    environment:
      NODE_ENV: production
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_USER: admin
      RABBITMQ_PASS: admin
    restart: always
    networks:
      - my_network

  tasks_service:
    build:
      context: .
      dockerfile: ./apps/Tasks/Dockerfile
    container_name: tasks_service
    ports:
      - '3004:3004'
    env_file:
      - .env
    depends_on:
      - rabbitmq # ✅ Đảm bảo RabbitMQ chạy trước
    environment:
      NODE_ENV: production
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_USER: admin
      RABBITMQ_PASS: admin
    restart: always
    networks:
      - my_network

  schedules_service:
    build:
      context: .
      dockerfile: ./apps/schedules/Dockerfile
    container_name: schedules_service
    ports:
      - '3005:3005'
    env_file:
      - .env
    depends_on:
      - rabbitmq # ✅ Đảm bảo RabbitMQ chạy trước
    environment:
      NODE_ENV: production
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_USER: admin
      RABBITMQ_PASS: admin
    restart: always
    networks:
      - my_network

  notifications_service:
    build:
      context: .
      dockerfile: ./apps/notifications/Dockerfile
    container_name: notifications_service
    ports:
      - '3006:3006'
    env_file:
      - .env
    depends_on:
      - rabbitmq
      - redis # ✅ Đảm bảo Redis chạy trước
    environment:
      NODE_ENV: production
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_USER: admin
      RABBITMQ_PASS: admin
    restart: always
    networks:
      - my_network

networks:
  my_network:
    driver: bridge
volumes:
  rabbitmq_data:
  redis-data:
