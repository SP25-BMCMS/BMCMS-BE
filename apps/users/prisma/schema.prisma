// Cấu hình Prisma
generator client {
  provider = "prisma-client-js"
  output   = "../../../node_modules/@prisma/client-users"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_USER_SERVICE")
}

model User {
  userId      String    @id @default(uuid())
  username    String    @unique
  password    String
  email       String    @unique
  phone       String?
  role        Role
  dateOfBirth DateTime?
  gender      Gender?

  userDetails UserDetails?
  apartments  Apartment[] // ✅ Resident có thể có nhiều Apartments
}

model UserDetails {
  userId       String       @id @default(uuid()) @map("user_id")
  positionId   String? // Chỉ Staff
  departmentId String? // Chỉ Staff
  staffStatus  StaffStatus? // Chỉ Staff
  staffRole    StaffRole?

  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)
  position     WorkingPosition? @relation(fields: [positionId], references: [positionId])
  department   Department?      @relation(fields: [departmentId], references: [departmentId])
}

model Apartment {
  apartmentId   String @id @default(uuid())
  apartmentName String
  buildingId    String
  ownerId       String @map("owner_id")

  owner User @relation(fields: [ownerId], references: [userId], onDelete: Cascade)
}

model Department {
  departmentId   String   @id @default(uuid())
  departmentName String   @unique
  description    String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt


  UserDetails UserDetails[]
}

model WorkingPosition {
  positionId   String         @id @default(uuid())
  positionName PositionName
  description  String?
  status       PositionStatus

  UserDetails UserDetails[]
}

enum StaffRole {
  Technician
  Leader
}

enum Role {
  Admin
  Manager
  Resident
  Staff
}

enum Gender {
  Male
  Female
  Other
}

enum StaffStatus {
  Active
  Inactive
  Probation
}

enum PositionName {
  Staff
  Leader
  Manager
  Admin
}

enum PositionStatus {
  Active
  Inactive
}
