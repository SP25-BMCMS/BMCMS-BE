import { Injectable } from '@nestjs/common';
import { PrismaService } from '../../prisma/prisma.service';
import { $Enums, Prisma } from '@prisma/client-cracks';
import { RpcException } from '@nestjs/microservices';
import { AddCrackReportDto } from '../../../../libs/contracts/src/cracks/add-crack-report.dto';
import { UpdateCrackReportDto } from '../../../../libs/contracts/src/cracks/update-crack-report.dto';
import { ApiResponse } from 'libs/contracts/src/ApiReponse/api-response';
import { ClientProxy } from '@nestjs/microservices';
import { TASKS_PATTERN } from 'libs/contracts/src/tasks/task.patterns';
import { Status } from '@prisma/client-Task';
import { firstValueFrom } from 'rxjs';
import { catchError } from 'rxjs/operators';
import { BadRequestException } from '@nestjs/common';

@Injectable()
export class CrackReportsService {
  constructor(private prismService: PrismaService) { }

  async getAllCrackReports() {
    return await this.prismService.crackReport.findMany();
  }

  async addCrackReport(dto: AddCrackReportDto, userId: string) {
    try {
      return await this.prismService.$transaction(async (prisma) => {
        // üîπ 1. T·∫°o CrackReport tr∆∞·ªõc
        const newCrackReport = await prisma.crackReport.create({
          data: {
            buildingDetailId: dto.buildingDetailId,
            description: dto.description,
            status: dto.status ?? $Enums.ReportStatus.Pending, // M·∫∑c ƒë·ªãnh Reported
            reportedBy: userId, // ‚úÖ Lu√¥n c√≥ gi√° tr·ªã
            verifiedBy: '123123', // ‚úÖ N·∫øu null th√¨ Prisma nh·∫≠n null
          }
        });

        console.log('üöÄ CrackReport ƒë√£ t·∫°o:', newCrackReport);

        // üîπ 2. N·∫øu c√≥ CrackDetails, t·∫°o t·ª´ng c√°i b·∫±ng `create()`
        let newCrackDetails = [];
        if (dto.crackDetails?.length > 0) {
          newCrackDetails = await Promise.all(
            dto.crackDetails.map(async (detail) => {
              return prisma.crackDetail.create({
                data: {
                  crackReportId: newCrackReport.crackReportId, // Li√™n k·∫øt CrackReport
                  photoUrl: detail.photoUrl,
                  severity: detail.severity ?? $Enums.Severity.Unknown, // M·∫∑c ƒë·ªãnh Unknown
                  aiDetectionUrl: detail.aiDetectionUrl ?? detail.photoUrl,
                },
              });
            })
          );
        }

        console.log('üöÄ CrackDetails ƒë√£ t·∫°o:', newCrackDetails);

        return new ApiResponse(true, 'Crack Report v√† Crack Details ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng', [
          { crackReport: newCrackReport, crackDetails: newCrackDetails },
        ]);
      });
    } catch (error) {
      console.error('üî• L·ªói trong CrackReportService:', error);

      if (error instanceof Prisma.PrismaClientKnownRequestError) {
        if (error.code === 'P2002') {
          throw new RpcException({
            status: 400,
            message: 'D·ªØ li·ªáu b·ªã tr√πng l·∫∑p',
          });
        }
      }

      throw new RpcException({
        status: 500,
        message: 'L·ªói h·ªá th·ªëng, vui l√≤ng th·ª≠ l·∫°i sau',
      });
    }
  }


  async findById(crackReportId: string) {
    const report = await this.prismService.crackReport.findUnique({ where: { crackReportId } });
    if (!report) {
      throw new RpcException(new ApiResponse(false, 'Crack Report kh√¥ng t·ªìn t·∫°i'));
    }
    return new ApiResponse(true, 'Crack Report ƒë√£ t√¨m th·∫•y', [report]);
  }

  async updateCrackReport(crackReportId: string, dto: UpdateCrackReportDto) {
    const existingReport = await this.prismService.crackReport.findUnique({ where: { crackReportId } });
    if (!existingReport) {
      throw new RpcException(new ApiResponse(false, 'Crack Report kh√¥ng t·ªìn t·∫°i'));
    }

    try {
      const updatedReport = await this.prismService.crackReport.update({
        where: { crackReportId },
        data: { ...dto },
      });
      return new ApiResponse(true, 'Crack Report ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng', [updatedReport]);
    } catch (error) {
      throw new RpcException(new ApiResponse(false, 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá'));
    }
  }

  async deleteCrackReport(crackReportId: string) {
    const existingReport = await this.prismService.crackReport.findUnique({ where: { crackReportId } });
    if (!existingReport) {
      throw new RpcException(new ApiResponse(false, 'Crack Report kh√¥ng t·ªìn t·∫°i'));
    }

    await this.prismService.crackReport.delete({ where: { crackReportId } });
    return new ApiResponse(true, 'Crack Report ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng');
  }

  async updateCrackReportStatus(
    crackReportId: string,
    managerId: string,
    taskClient: ClientProxy
  ) {
    try {
      // Start a transaction
      return await this.prismService.$transaction(async (prisma) => {
        // 1. Find the existing crack report
        const existingReport = await prisma.crackReport.findUnique({
          where: { crackReportId }
        });

        if (!existingReport) {
          throw new RpcException(new ApiResponse(false, 'Crack Report kh√¥ng t·ªìn t·∫°i'));
        }

        // 2. Update the crack report status to InProgress
        const updatedReport = await prisma.crackReport.update({
          where: { crackReportId },
          data: {
            status: $Enums.ReportStatus.InProgress,
            verifiedBy: managerId
          }
        });

        // 3. Create a Task
        const createTaskResponse = await firstValueFrom(
          taskClient.send(TASKS_PATTERN.CREATE, {
            description: `X·ª≠ l√Ω b√°o c√°o n·ª©t ${crackReportId}`,
            status: Status.Assigned,
            crack_id: crackReportId,
            schedule_job_id: '' // You might want to generate or pass this
          })
        );

        // 4. Create a Task Assignment
        const createTaskAssignmentResponse = await firstValueFrom(
          taskClient.send(TASKS_PATTERN.CREATE_TASK_ASSIGNMENT, {
            task_id: createTaskResponse.task_id,
            employee_id: managerId,
            description: `Ph√¢n c√¥ng x·ª≠ l√Ω b√°o c√°o n·ª©t ${crackReportId}`,
            status: 'Pending'
          })
        );

        return new ApiResponse(true, 'Crack Report ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t v√† Task ƒë√£ ƒë∆∞·ª£c t·∫°o', [
          {
            crackReport: updatedReport,
            task: createTaskResponse,
            taskAssignment: createTaskAssignmentResponse
          }
        ]);
      });
    } catch (error) {
      console.error('üî• L·ªói trong updateCrackReportStatus:', error);
      throw new RpcException(new ApiResponse(false, 'L·ªói h·ªá th·ªëng, vui l√≤ng th·ª≠ l·∫°i sau'));
    }
  }
}
