// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../../../node_modules/@prisma/client-cracks"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_CRACK_SERVICE")
}

model CrackReport {
  crackReportId          String        @id @default(uuid())
  buildingDetailId String
  description      String
  status           ReportStatus  @default(Reported)
  reportedBy       String
  verifiedBy       String
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  crackDetails     CrackDetail[]
}

model CrackDetail {
  crackDetailsId String      @id @default(uuid())
  crackReportId        String
  photoUrl       String
  status         CrackStatus @default(InProgress)
  severity       Severity    @default(Unknown)
  aiDetectionUrl    String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  crackReport    CrackReport @relation(fields: [crackReportId], references: [crackReportId])

  crackSegment CrackSegment[]
}

model CrackSegment {
  crackSegmentId String @id @default(uuid())
  crackDetailsId  String
  confidence     Float
  x             Float
  y             Float
  z             Float
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  crackDetail CrackDetail @relation(fields: [crackDetailsId], references: [crackDetailsId])
}

enum ReportStatus {
  Reported
  Verified
  Completed
  Rejected
}

enum CrackStatus {
  InProgress
  Verified
  Completed
}

enum Severity {
  Unknown
  Low
  Medium
  High
}
