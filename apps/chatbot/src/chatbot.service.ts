import { Injectable, Logger, Inject } from '@nestjs/common';
import { ChatMessageDto, ChatResponseDto, ChatListQueryDto } from '@app/contracts/chatbot/chatbot.dto';
import { PrismaService } from '../prisma/prisma.service';
import { GeminiService } from './utils/gemini.service';
import { ClientProxy } from '@nestjs/microservices';
import { firstValueFrom } from 'rxjs';
import { BUILDINGS_PATTERN } from '@app/contracts/buildings/buildings.patterns';
@Injectable()
export class ChatbotService {
  private readonly logger = new Logger(ChatbotService.name);

  constructor(
    private readonly prisma: PrismaService,
    private readonly geminiService: GeminiService,
    @Inject('CRACK_CLIENT') private readonly cracksClient: ClientProxy,
    @Inject('BUILDINGS_CLIENT') private readonly buildingsClient: ClientProxy,
  ) {
    this.logger.log('ChatbotService initialized');
    this.logger.log('CRACK_CLIENT connected successfully');
    this.logger.log('BUILDINGS_CLIENT connected successfully');
  }

  async getUserChats(userId: string, page: number = 1, limit: number = 10): Promise<any> {
    this.logger.log(`[getUserChats] Getting chat history for user ${userId}, page ${page}, limit ${limit}`);

    try {
      if (!userId) {
        this.logger.error('[getUserChats] No userId provided');
        throw new Error('User ID is required');
      }

      // Calculate skip for pagination
      const skip = (page - 1) * limit;

      // Get total count for pagination metadata
      const totalCount = await this.prisma.chat.count({
        where: { userId }
      });

      // Get chat messages with pagination
      const chats = await this.prisma.chat.findMany({
        where: { userId },
        orderBy: { createdAt: 'desc' },
        skip,
        take: limit,
      });

      this.logger.log(`[getUserChats] Found ${chats.length} chat messages for user ${userId}`);

      // Calculate pagination metadata
      const totalPages = Math.ceil(totalCount / limit);
      const hasNext = page < totalPages;
      const hasPrevious = page > 1;

      return {
        data: chats,
        meta: {
          page,
          limit,
          totalCount,
          totalPages,
          hasNext,
          hasPrevious
        }
      };
    } catch (error) {
      this.logger.error(`[getUserChats] Error getting chat history:`, error);
      throw error;
    }
  }

  private async getCrackReportsInfo(userId: string): Promise<string> {
    try {
      // L·∫•y th√¥ng tin crack reports
      const crackReportsResponse = await firstValueFrom(
        this.cracksClient.send({ cmd: 'get-all-crack-report-by-user-id' }, { userId })
      );
      console.log("üöÄ ~ ChatbotService ~ getCrackReportsInfo ~ Full response:", crackReportsResponse);
      
      if (!crackReportsResponse || !crackReportsResponse.isSuccess || !crackReportsResponse.data || !crackReportsResponse.data.crackReports) {
        console.log("üöÄ ~ ChatbotService ~ getCrackReportsInfo ~ Invalid response structure:", crackReportsResponse);
        return "\n\nKh√¥ng th·ªÉ l·∫•y th√¥ng tin v·∫øt n·ª©t. Vui l√≤ng th·ª≠ l·∫°i sau.\n";
      }

      const crackReports = crackReportsResponse.data.crackReports;
      console.log("üöÄ ~ ChatbotService ~ getCrackReportsInfo ~ crackReports array:", crackReports);
      
      if (crackReports.length === 0) {
        console.log("üöÄ ~ ChatbotService ~ getCrackReportsInfo ~ No crack reports found for user");
        return "\n\nB·∫°n ch∆∞a c√≥ b√°o c√°o v·∫øt n·ª©t n√†o.\n";
      }

      // L·∫•y th√¥ng tin building cho m·ªói report
      let crackReportsInfo = `\n\nTH√îNG TIN V·∫æT N·ª®T C·ª¶A B·∫†N:\n`;
      for (const report of crackReports) {
        try {
          console.log(`üöÄ ~ ChatbotService ~ getCrackRep√°dasdassdasdsdasdsortsInfo ~ Processing report:`,  report.buildingDetailId);
          
          // L·∫•y th√¥ng tin building
          let buildingName = 'Kh√¥ng x√°c ƒë·ªãnh';
          try {
            if (report.buildingDetailId) {
              const buildingResponse = await firstValueFrom(
                this.buildingsClient.send(BUILDINGS_PATTERN.GET_BY_ID, { id: report.buildingDetailId })
              );
              console.log(`üöÄ ~ ChatbotService ~ getCrackReportsInfo ~ Building response:`, buildingResponse);
              
              if (buildingResponse && buildingResponse.isSuccess && buildingResponse.data) {
                buildingName = buildingResponse.data.name;
                console.log("üöÄ ~ ChatbotService ~ getCrackReportsInfo ~ Building name:", buildingName);
              }
            } else {
              console.log("üöÄ ~ ChatbotService ~ getCrackReportsInfo ~ No buildingDetailId found for report");
            }
          } catch (buildingError) {
            console.error(`üöÄ ~ ChatbotService ~ getCrackReportsInfo ~ Error getting building info:`, buildingError);
          }
          
          crackReportsInfo += `- V·ªã tr√≠: ${report.position}\n`;
          crackReportsInfo += `- Khu v·ª±c: ${buildingName}\n`;
          crackReportsInfo += `  M√¥ t·∫£: ${report.description}\n`;
          crackReportsInfo += `  Tr·∫°ng th√°i: ${report.status}\n`;
          crackReportsInfo += `  Ng√†y b√°o c√°o: ${report.created_at}\n`;
          
          if (report.crackDetails && report.crackDetails.length > 0) {
            console.log(`üöÄ ~ ChatbotService ~ getCrackReportsInfo ~ crackDetails:`, report.crackDetails);
            crackReportsInfo += `  M·ª©c ƒë·ªô nghi√™m tr·ªçng: ${report.crackDetails[0].severity}\n`;
            
            // Th√™m th√¥ng tin ·∫£nh n·∫øu c√≥
            if (report.crackDetails[0].aiDetectionUrl) {
              crackReportsInfo += `  ·∫¢nh ph√°t hi·ªán: ${report.crackDetails[0].aiDetectionUrl}\n`;
            }
          }
          crackReportsInfo += `\n`;
        } catch (error) {
          console.error(`üöÄ ~ ChatbotService ~ getCrackReportsInfo ~ Error processing report:`, error);
          continue;
        }
      }

      console.log("üöÄ ~ ChatbotService ~ getCrackReportsInfo ~ Final crackReportsInfo:", crackReportsInfo);
      return crackReportsInfo;
    } catch (error) {
      console.error("üöÄ ~ ChatbotService ~ getCrackReportsInfo ~ Error:", error);
      return "\n\nKh√¥ng th·ªÉ l·∫•y th√¥ng tin v·∫øt n·ª©t. Vui l√≤ng th·ª≠ l·∫°i sau.\n";
    }
  }

  async testChat(message: string, userId: string): Promise<string> {
    this.logger.log(`[testChat] Processing message from user ${userId}: "${message}"`);

    try {
      // // L∆∞u message v√†o database ƒë·ªÉ tracking
      // await this.prisma.chat.create({
      //   data: {
      //     userId: userId,
      //     message: message,
      //     isUser: true,
      //     type: 'test'
      //   },
      // });

      let response: string;
      console.log("üöÄ ~ ChatbotService ~ ƒë√¢sdasdsadsdasdadasdadsdadasdsad ~ response:", response)
      try {
        // L·∫•y th√¥ng tin crack reports
        const crackReportsInfo = await this.getCrackReportsInfo(userId);

        // T·∫°o prompt cho Gemini API
        const prompt = `B·∫°n l√† m·ªôt tr·ª£ l√Ω AI th√¥ng minh cho h·ªá th·ªëng Building Management & Crack Monitoring System  v√† ch·ªâ c√≥ th·ªÉ tr·∫£ l·ªùi li√™n quan t·ªõi nh·ªØng c√¢u h·ªèi li√™n quan t·ªõi b·∫£o tr√¨ , v·∫øt n·ª©t v√† h∆∞·ªõng d·∫´n c√°ch b√°o c√°o report ƒë·∫øn cho h·ªá th·ªëng.

H∆Ø·ªöNG D·∫™N PH·∫¢N H·ªíI:
- Tr·∫£ l·ªùi theo ƒë√∫ng n·ªôi dung c√¢u h·ªèi, kh√¥ng l·∫∑p l·∫°i c·∫•u tr√∫c c·ªë ƒë·ªãnh
- Ch·ªâ gi·ªõi thi·ªáu t·ªïng quan v·ªÅ h·ªá th·ªëng khi ng∆∞·ªùi d√πng h·ªèi v·ªÅ to√†n b·ªô h·ªá th·ªëng
- Tr·∫£ l·ªùi c√≥ c·∫£m x√∫c v·ªõi c∆∞ d√¢n vinhomes, s√∫c t√≠ch, ƒëi th·∫≥ng v√†o v·∫•n ƒë·ªÅ ng∆∞·ªùi d√πng ƒëang h·ªèi v√† kh√¥ng l·∫∑p l·∫°i c·∫•u tr√∫c
- N·∫øu ng∆∞·ªùi d√πng h·ªèi v·ªÅ ch·ª©c nƒÉng c·ª• th·ªÉ (nh∆∞ qu·∫£n l√Ω t√≤a nh√†) h∆∞·ªõng d·∫´n h·ªç c√°ch report ƒë·∫øn cho h·ªá th·ªëng 
- Ph·∫£n h·ªìi t·ª± nhi√™n nh∆∞ m·ªôt cu·ªôc tr√≤ chuy·ªán, kh√¥ng ph·∫£i nh∆∞ m·ªôt b√†i thuy·∫øt tr√¨nh
- Lu√¥n lu√¥n cho h·ªç s·ªë ƒëi·ªán tho·∫°i c·∫ßn h·ªó tr·ª£ "0939193974" nh·ªõ ghi l√† "b·∫°n c√≥ th·∫Øc m·∫Øc g√¨ hay c√≥ g√¨ khi·∫øu n·∫°i h√£y g·ªçi t·ªõi ban quan l√Ω Tr·∫ßn Nh·∫≠t Quang"
- N·∫øu ng∆∞·ªùi d√πng h·ªèi v·ªÅ t√¨nh tr·∫°ng v·∫øt n·ª©t, h√£y tham kh·∫£o th√¥ng tin v·∫øt n·ª©t c·ªßa h·ªç t·ª´ ph·∫ßn TH√îNG TIN V·∫æT N·ª®T C·ª¶A B·∫†N
- b·ªüi v√¨ 1 resident c√≥ r·∫•t nhi·ªÅu b·∫£n report , n√™n d·ª±a v√†o  ${crackReportsInfo} created_at m·ªõi nh·∫•t ƒë·ªÉ tr·∫£ v·ªÅ , nh·ªõ tr·∫£ ƒë∆∞·ªùng d·∫´n ·∫£nh AiDetectionUrl  ${crackReportsInfo} 

TH√îNG TIN H·ªÜ TH·ªêNG:
Building Management & Crack Monitoring System l√† h·ªá th·ªëng qu·∫£n l√Ω t√≤a nh√† v√† gi√°m s√°t v·∫øt n·ª©t v·ªõi nhi·ªÅu ch·ª©c nƒÉng:
1. Qu·∫£n l√Ω t√≤a nh√†: theo d√µi th√¥ng tin t√≤a nh√†, qu·∫£n l√Ω t√†i s·∫£n, l·ªãch b·∫£o tr√¨, h·ªá th·ªëng k·ªπ thu·∫≠t
2. Gi√°m s√°t v·∫øt n·ª©t: ph√°t hi·ªán, theo d√µi, ƒë√°nh gi√° m·ª©c ƒë·ªô nghi√™m tr·ªçng c·ªßa v·∫øt n·ª©t
3. C·∫£nh b√°o v√† th√¥ng b√°o: g·ª≠i c·∫£nh b√°o khi ph√°t hi·ªán v·∫•n ƒë·ªÅ
4. L·∫≠p k·∫ø ho·∫°ch b·∫£o tr√¨: theo l·ªãch ho·∫∑c d·ª±a tr√™n t√¨nh tr·∫°ng
5. M·ª•c ti√™u l√† cho ph√©p ng∆∞·ªùi d√πng xem l·ªãch s·ª≠ b·∫£o tr√¨ c·ªßa cƒÉn h·ªô n√†o ƒë√≥, theo d√µi l·ªãch s·ª≠ ho·∫°t ƒë·ªông c·ªßa b√°o c√°o v·∫øt n·ª©t, c·∫£nh b√°o khi cho l·ªãch b·∫£o tr√¨  m·ªõi ƒë∆∞·ª£c t·∫°o li√™n quan t·ªõi cƒÉn h·ªô c·ªßa n√≥.
${crackReportsInfo}

C√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng: ${message}`;

        // G·ªçi Gemini API
        this.logger.log(`[testChat] Calling Gemini API with prompt`);
        response = await this.geminiService.generateText(prompt);
        this.logger.log(`[testChat] Received response from Gemini API`);
      } catch (geminiError) {
        this.logger.error(`[testChat] Error calling Gemini API:`, geminiError);
        
        // Fallback response d·ª±a tr√™n keywords khi Gemini API fails
        response = 'T√¥i kh√¥ng hi·ªÉu c√¢u h·ªèi c·ªßa b·∫°n. Vui l√≤ng h·ªèi r√µ h∆°n v·ªÅ h·ªá th·ªëng BMCMS.';

        // Chuy·ªÉn message sang lowercase ƒë·ªÉ d·ªÖ t√¨m keywords
        const lowercaseMessage = message.toLowerCase();

        // Ki·ªÉm tra c√°c keywords v√† t·∫°o response ph√π h·ª£p
        if (lowercaseMessage.includes('xin ch√†o') || lowercaseMessage.includes('hello')) {
          response = 'Xin ch√†o! T√¥i l√† chatbot c·ªßa h·ªá th·ªëng BMCMS. T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?';
        } else if (lowercaseMessage.includes('h·ªá th·ªëng') || lowercaseMessage.includes('gi·ªõi thi·ªáu')) {
          response = 'BMCMS l√† h·ªá th·ªëng qu·∫£n l√Ω t√≤a nh√† th√¥ng minh, gi√∫p qu·∫£n l√Ω c√°c t√≤a nh√†, ph√°t hi·ªán v·∫øt n·ª©t, v√† t·ª± ƒë·ªông c·∫£nh b√°o khi c√≥ s·ª± c·ªë.';
        } else if (lowercaseMessage.includes('v·∫øt n·ª©t') || lowercaseMessage.includes('n·ª©t')) {
          response = 'H·ªá th·ªëng BMCMS c√≥ th·ªÉ ph√°t hi·ªán v·∫øt n·ª©t th√¥ng qua camera AI, gi√∫p ph√¢n lo·∫°i m·ª©c ƒë·ªô nghi√™m tr·ªçng v√† ƒë∆∞a ra c·∫£nh b√°o k·ªãp th·ªùi.';
        }
      }

      // // L∆∞u response v√†o database
      // await this.prisma.chat.create({
      //   data: {
      //     userId: userId,
      //     message: response,
      //     isUser: false,
      //     type: 'test'
      //   },
      // });

      this.logger.log(`[testChat] Final response: "${response}"`);
      return response;
    } catch (error) {
      this.logger.error('[testChat] Error processing message:', error);
      return 'Xin l·ªói, c√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω tin nh·∫Øn c·ªßa b·∫°n.';
    }
  }

  async generateContent(request: ChatMessageDto): Promise<ChatResponseDto> {
    try {
      // Save user's message
      await this.prisma.chat.create({
        data: {
          userId: request.userId,
          message: request.message,
          isUser: true,
          type: 'user'
        },
      });

      let response: string;
      let type = 'system';

      try {
        // T·∫°o prompt cho Gemini API
        const prompt = `B·∫°n l√† m·ªôt tr·ª£ l√Ω AI th√¥ng minh cho h·ªá th·ªëng Building Management & Crack Monitoring System.

H∆Ø·ªöNG D·∫™N PH·∫¢N H·ªíI:
- Tr·∫£ l·ªùi theo ƒë√∫ng n·ªôi dung c√¢u h·ªèi, kh√¥ng l·∫∑p l·∫°i c·∫•u tr√∫c c·ªë ƒë·ªãnh
- Ch·ªâ gi·ªõi thi·ªáu t·ªïng quan v·ªÅ h·ªá th·ªëng khi ng∆∞·ªùi d√πng h·ªèi v·ªÅ to√†n b·ªô h·ªá th·ªëng
- Tr·∫£ l·ªùi ng·∫Øn g·ªçn, s√∫c t√≠ch, ƒëi th·∫≥ng v√†o v·∫•n ƒë·ªÅ ng∆∞·ªùi d√πng ƒëang h·ªèi
- N·∫øu ng∆∞·ªùi d√πng h·ªèi v·ªÅ ch·ª©c nƒÉng c·ª• th·ªÉ (nh∆∞ qu·∫£n l√Ω t√≤a nh√†), ch·ªâ t·∫≠p trung v√†o ch·ª©c nƒÉng ƒë√≥
- Ph·∫£n h·ªìi t·ª± nhi√™n nh∆∞ m·ªôt cu·ªôc tr√≤ chuy·ªán, kh√¥ng ph·∫£i nh∆∞ m·ªôt b√†i thuy·∫øt tr√¨nh

TH√îNG TIN H·ªÜ TH·ªêNG:
Building Management & Crack Monitoring System l√† h·ªá th·ªëng qu·∫£n l√Ω t√≤a nh√† v√† gi√°m s√°t v·∫øt n·ª©t v·ªõi nhi·ªÅu ch·ª©c nƒÉng:
1. Qu·∫£n l√Ω t√≤a nh√†: theo d√µi th√¥ng tin t√≤a nh√†, qu·∫£n l√Ω t√†i s·∫£n, l·ªãch b·∫£o tr√¨, h·ªá th·ªëng k·ªπ thu·∫≠t
2. Gi√°m s√°t v·∫øt n·ª©t: ph√°t hi·ªán, theo d√µi, ƒë√°nh gi√° m·ª©c ƒë·ªô nghi√™m tr·ªçng c·ªßa v·∫øt n·ª©t
3. C·∫£nh b√°o v√† th√¥ng b√°o: g·ª≠i c·∫£nh b√°o khi ph√°t hi·ªán v·∫•n ƒë·ªÅ
4. L·∫≠p k·∫ø ho·∫°ch b·∫£o tr√¨: theo l·ªãch ho·∫∑c d·ª±a tr√™n t√¨nh tr·∫°ng

C√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng: ${request.message}`;

        // G·ªçi Gemini API
        this.logger.log(`[generateContent] Calling Gemini API with prompt`);
        response = await this.geminiService.generateText(prompt);
        console.log("üöÄ ~ Ch√°datbotServiceCh√°datbotServiceCh√°datbotServiceCh√°datbotServiceCh√°datbotServiceCh√°datbotServiceCh√°datbotService ~ generateContent ~ response:", response)
        this.logger.log(`[generateContent] Received response from Gemini API`);
        
        // X√°c ƒë·ªãnh type d·ª±a tr√™n n·ªôi dung response
        if (response.toLowerCase().includes('v·∫øt n·ª©t') || response.toLowerCase().includes('n·ª©t')) {
          type = 'crack';
        }
      } catch (geminiError) {
        this.logger.error(`[generateContent] Error calling Gemini API:`, geminiError);
        
        // Fallback response d·ª±a tr√™n keywords khi Gemini API fails
        response = 'Xin ch√†o! T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?';

        if (request.message.toLowerCase().includes('h·ªá th·ªëng') || 
            request.message.toLowerCase().includes('gi·ªõi thi·ªáu')) {
          response = 'BMCMS l√† h·ªá th·ªëng qu·∫£n l√Ω t√≤a nh√† th√¥ng minh, gi√∫p theo d√µi v√† qu·∫£n l√Ω c√°c v·∫øt n·ª©t, l·ªãch b·∫£o tr√¨ v√† c√°c nhi·ªám v·ª• li√™n quan.';
          type = 'system';
        } else if (request.message.toLowerCase().includes('v·∫øt n·ª©t') || 
                  request.message.toLowerCase().includes('n·ª©t')) {
          response = 'V·∫øt n·ª©t trong t√≤a nh√† c·∫ßn ƒë∆∞·ª£c theo d√µi v√† ƒë√°nh gi√° th∆∞·ªùng xuy√™n. H·ªá th·ªëng BMCMS gi√∫p qu·∫£n l√Ω v√† theo d√µi c√°c v·∫øt n·ª©t n√†y.';
          type = 'crack';
        }
      }

      // Save AI's response
      await this.prisma.chat.create({
        data: {
          userId: request.userId,
          message: response,
          isUser: false,
          type: type
        },
      });

      return {
        response,
        type
      };
    } catch (error) {
      this.logger.error('Error generating content:', error);
      throw new Error('Failed to generate content');
    }
  }
} 