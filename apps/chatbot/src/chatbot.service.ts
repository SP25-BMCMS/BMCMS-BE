import { Injectable, Logger } from '@nestjs/common';
import { ChatMessageDto, ChatResponseDto, ChatListQueryDto } from '@app/contracts/chatbot/chatbot.dto';
import { PrismaService } from '../prisma/prisma.service';
import { GeminiService } from './utils/gemini.service';

@Injectable()
export class ChatbotService {
  private readonly logger = new Logger(ChatbotService.name);

  constructor(
    private readonly prisma: PrismaService,
    private readonly geminiService: GeminiService,
  ) {
    this.logger.log('ChatbotService initialized');
  }

  async testChat(message: string): Promise<string> {
    this.logger.log(`[testChat] Processing message: "${message}"`);

    try {
      // L∆∞u message v√†o database ƒë·ªÉ tracking
      await this.prisma.chat.create({
        data: {
          userId: 'system_test',
          message: message,
          isUser: true,
          type: 'test'
        },
      });

      let response: string;

      try {
        // T·∫°o prompt cho Gemini API
        const prompt = `B·∫°n l√† m·ªôt tr·ª£ l√Ω AI th√¥ng minh cho h·ªá th·ªëng Building Management & Crack Monitoring System (BMCMS).
Khi tr·∫£ l·ªùi:
1. v√† l·ªùi n√≥i ƒë·∫ßu ti√™n ph·∫£i ch√†o h·ªèi v√† ch√∫c m·ªôt ng√†y t·ªët l√†nh LU√îN vi·∫øt ƒë·∫ßy ƒë·ªß "Building Management & Crack Monitoring System" thay v√¨ vi·∫øt t·∫Øt BMCMS trong c√¢u tr·∫£ l·ªùi ƒë·∫ßu ti√™n c·ªßa b·∫°n.
2. Gi·ªõi thi·ªáu ng·∫Øn g·ªçn v·ªÅ Building Management & Crack Monitoring System l√† h·ªá th·ªëng qu·∫£n l√Ω t√≤a nh√† v√† gi√°m s√°t v·∫øt n·ª©t.
3. Cung c·∫•p th√¥ng tin c·ª• th·ªÉ v·ªÅ c√°c ch·ª©c nƒÉng ch√≠nh: qu·∫£n l√Ω t√≤a nh√†, theo d√µi v·∫øt n·ª©t, l·∫≠p l·ªãch b·∫£o tr√¨, v√† c·∫£nh b√°o khi ph√°t hi·ªán v·∫•n ƒë·ªÅ.
4. Tr·∫£ l·ªùi ng·∫Øn g·ªçn nh∆∞ng ƒë·∫ßy ƒë·ªß th√¥ng tin.

C√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng: ${message}`;

        // G·ªçi Gemini API
        this.logger.log(`[testChat] Calling Gemini API with prompt`);
        response = await this.geminiService.generateText(prompt);
        this.logger.log(`[testChat] Received response from Gemini API`);
      } catch (geminiError) {
        this.logger.error(`[testChat] Error calling Gemini API:`, geminiError);
        
        // Fallback response d·ª±a tr√™n keywords khi Gemini API fails
        response = 'T√¥i kh√¥ng hi·ªÉu c√¢u h·ªèi c·ªßa b·∫°n. Vui l√≤ng h·ªèi r√µ h∆°n v·ªÅ h·ªá th·ªëng BMCMS.';

        // Chuy·ªÉn message sang lowercase ƒë·ªÉ d·ªÖ t√¨m keywords
        const lowercaseMessage = message.toLowerCase();

        // Ki·ªÉm tra c√°c keywords v√† t·∫°o response ph√π h·ª£p
        if (lowercaseMessage.includes('xin ch√†o') || lowercaseMessage.includes('hello')) {
          response = 'Xin ch√†o! T√¥i l√† chatbot c·ªßa h·ªá th·ªëng BMCMS. T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?';
        } else if (lowercaseMessage.includes('h·ªá th·ªëng') || lowercaseMessage.includes('gi·ªõi thi·ªáu')) {
          response = 'BMCMS l√† h·ªá th·ªëng qu·∫£n l√Ω t√≤a nh√† th√¥ng minh, gi√∫p qu·∫£n l√Ω c√°c t√≤a nh√†, ph√°t hi·ªán v·∫øt n·ª©t, v√† t·ª± ƒë·ªông c·∫£nh b√°o khi c√≥ s·ª± c·ªë.';
        } else if (lowercaseMessage.includes('v·∫øt n·ª©t') || lowercaseMessage.includes('n·ª©t')) {
          response = 'H·ªá th·ªëng BMCMS c√≥ th·ªÉ ph√°t hi·ªán v·∫øt n·ª©t th√¥ng qua camera AI, gi√∫p ph√¢n lo·∫°i m·ª©c ƒë·ªô nghi√™m tr·ªçng v√† ƒë∆∞a ra c·∫£nh b√°o k·ªãp th·ªùi.';
        }
      }

      // L∆∞u response v√†o database
      await this.prisma.chat.create({
        data: {
          userId: 'system_test',
          message: response,
          isUser: false,
          type: 'test'
        },
      });

      this.logger.log(`[testChat] Final response: "${response}"`);
      return response;
    } catch (error) {
      this.logger.error('[testChat] Error processing message:', error);
      return 'Xin l·ªói, c√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω tin nh·∫Øn c·ªßa b·∫°n.';
    }
  }

  async generateContent(request: ChatMessageDto): Promise<ChatResponseDto> {
    try {
      // Save user's message
      await this.prisma.chat.create({
        data: {
          userId: request.userId,
          message: request.message,
          isUser: true,
          type: 'user'
        },
      });

      let response: string;
      let type = 'system';

      try {
        // T·∫°o prompt cho Gemini API
        const prompt = `B·∫°n l√† m·ªôt tr·ª£ l√Ω AI th√¥ng minh cho h·ªá th·ªëng Building Management & Crack Monitoring System (BMCMS).
Khi tr·∫£ l·ªùi:
1. LU√îN ch√†o h·ªèi l·∫°i ng∆∞·ªùi d√πng v√† ch√∫c m·ªôt ng√†y ƒë·∫πp tr·ªùi v√†   vi·∫øt ƒë·∫ßy ƒë·ªß "Building Management & Crack Monitoring System" thay v√¨ vi·∫øt t·∫Øt BMCMS trong c√¢u tr·∫£ l·ªùi ƒë·∫ßu ti√™n c·ªßa b·∫°n.
2. Gi·ªõi thi·ªáu ng·∫Øn g·ªçn v·ªÅ Building Management & Crack Monitoring System l√† h·ªá th·ªëng qu·∫£n l√Ω t√≤a nh√† v√† gi√°m s√°t v·∫øt n·ª©t.
3. Cung c·∫•p th√¥ng tin c·ª• th·ªÉ v·ªÅ c√°c ch·ª©c nƒÉng ch√≠nh: qu·∫£n l√Ω t√≤a nh√†, theo d√µi v·∫øt n·ª©t, l·∫≠p l·ªãch b·∫£o tr√¨, v√† c·∫£nh b√°o khi ph√°t hi·ªán v·∫•n ƒë·ªÅ.
4. Tr·∫£ l·ªùi ng·∫Øn g·ªçn nh∆∞ng ƒë·∫ßy ƒë·ªß th√¥ng tin.

C√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng: ${request.message}`;

        // G·ªçi Gemini API
        this.logger.log(`[generateContent] Calling Gemini API with prompt`);
        response = await this.geminiService.generateText(prompt);
        console.log("üöÄ ~ Ch√°datbotServiceCh√°datbotServiceCh√°datbotServiceCh√°datbotServiceCh√°datbotServiceCh√°datbotServiceCh√°datbotService ~ generateContent ~ response:", response)
        this.logger.log(`[generateContent] Received response from Gemini API`);
        
        // X√°c ƒë·ªãnh type d·ª±a tr√™n n·ªôi dung response
        if (response.toLowerCase().includes('v·∫øt n·ª©t') || response.toLowerCase().includes('n·ª©t')) {
          type = 'crack';
        }
      } catch (geminiError) {
        this.logger.error(`[generateContent] Error calling Gemini API:`, geminiError);
        
        // Fallback response d·ª±a tr√™n keywords khi Gemini API fails
        response = 'Xin ch√†o! T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?';

        if (request.message.toLowerCase().includes('h·ªá th·ªëng') || 
            request.message.toLowerCase().includes('gi·ªõi thi·ªáu')) {
          response = 'BMCMS l√† h·ªá th·ªëng qu·∫£n l√Ω t√≤a nh√† th√¥ng minh, gi√∫p theo d√µi v√† qu·∫£n l√Ω c√°c v·∫øt n·ª©t, l·ªãch b·∫£o tr√¨ v√† c√°c nhi·ªám v·ª• li√™n quan.';
          type = 'system';
        } else if (request.message.toLowerCase().includes('v·∫øt n·ª©t') || 
                  request.message.toLowerCase().includes('n·ª©t')) {
          response = 'V·∫øt n·ª©t trong t√≤a nh√† c·∫ßn ƒë∆∞·ª£c theo d√µi v√† ƒë√°nh gi√° th∆∞·ªùng xuy√™n. H·ªá th·ªëng BMCMS gi√∫p qu·∫£n l√Ω v√† theo d√µi c√°c v·∫øt n·ª©t n√†y.';
          type = 'crack';
        }
      }

      // Save AI's response
      await this.prisma.chat.create({
        data: {
          userId: request.userId,
          message: response,
          isUser: false,
          type: type
        },
      });

      return {
        response,
        type
      };
    } catch (error) {
      this.logger.error('Error generating content:', error);
      throw new Error('Failed to generate content');
    }
  }
} 