// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../../../node_modules/@prisma/client-building"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_BUILDING_SERVICE")
}

model Building {
  buildingId        String           @id @default(uuid())
  name              String
  description       String?
  numberFloor       Int
  imageCover        String?
  area              Area?            @relation(fields: [areaId], references: [areaId])
  //Trong trường hợp của Building và Area, mối quan hệ này là 1:N, tức là mỗi Building có thể thuộc về một Area, nhưng một Area có thể có nhiều Building.
  buildingDetails   BuildingDetail[]
  // scheduleJobs    ScheduleJob[]
  areaId            String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  Status            BuildingStatus?
  construction_date DateTime         @default(now()) @db.Date
  completion_date   DateTime         @default(now()) @db.Date
  Warranty_date     DateTime         @default(now()) @db.Date
}

enum BuildingStatus {
  under_construction
  operational
  completion_date
}

model Area {
  areaId      String     @id @default(uuid())
  name        String
  description String?
  buildings   Building[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model BuildingDetail {
  buildingDetailId String           @id @default(uuid())
  buildingId       String
  name             String
  total_apartments Int
  locationDetails  LocationDetail[]
  device           Device[]

  building  Building @relation(fields: [buildingId], references: [buildingId])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LocationDetail {
  locationDetailId String          @id @default(uuid())
  buildingDetailId String
  inspection_id    String
  roomNumber       String?
  floorNumber      Int
  areaType         AreaDetailsType
  description      String?
  buildingDetail   BuildingDetail  @relation(fields: [buildingDetailId], references: [buildingDetailId])
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  crackRecords CrackRecord[] // Quan hệ 1:N với CrackRecord
}

model Device {
  device_id        String         @id @default(uuid())
  name             String         @db.VarChar(100)
  type             DeviceType     @default(Other)
  manufacturer     String?        @db.VarChar(100)
  model            String?        @db.VarChar(100)
  buildingDetailId String
  buildingDetail   BuildingDetail @relation(fields: [buildingDetailId], references: [buildingDetailId])

  contract_id String?
  Contract    Contract? @relation(fields: [contract_id], references: [contract_id])

  technical_records     TechnicalRecord[]
  maintenance_histories MaintenanceHistory[]
}

model Contract {
  contract_id String    @id @default(uuid())
  start_date  DateTime? @db.Date
  end_date    DateTime? @db.Date
  vendor      String?   @db.VarChar(255)
  file_name   String?   @db.VarChar(255)
  createdAt   DateTime  @default(now())

  devices Device[]
}

model TechnicalRecord {
  record_id   String   @id @default(uuid())
  device_id   String
  file_name   String   @db.VarChar(255)
  file_type   String   @db.VarChar(50) // Bản vẽ, Hướng dẫn bảo trì,...
  upload_date DateTime @db.Date

  device Device @relation(fields: [device_id], references: [device_id])
}

model MaintenanceHistory {
  maintenance_id String   @id @default(uuid())
  device_id      String
  date_performed DateTime @db.Date
  description    String?
  cost           Decimal?

  device Device @relation(fields: [device_id], references: [device_id])
}

model CrackRecord {
  crackRecordId    String    @id @default(uuid())
  locationDetailId String
  crackType        CrackType
  length           Float // Chiều dài vết nứt (mét hoặc cm tùy đơn vị bạn chọn)
  width            Float // Chiều rộng vết nứt
  depth            Float? // Độ sâu vết nứt nếu cần
  description      String? // Mô tả thêm (nếu có)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  locationDetail LocationDetail @relation(fields: [locationDetailId], references: [locationDetailId])
}

enum CrackType {
  Vertical // Dọc
  Horizontal // Ngang
  Diagonal // Xiên
  Structural // Kết cấu
  NonStructural // Không kết cấu
  Other
}

enum AreaType {
  SwimmingPool
  Terrace
  Garden
  Parking
  Gym
  Lobby
  Other
}

enum AreaDetailsType {
  Floor
  Wall
  Ceiling
  column
  Other
}

enum DeviceType {
  Elevator // Thang máy
  FireProtection // PCCC
  Electrical // Hệ thống điện
  Plumbing // Cấp thoát nước
  HVAC // Điều hòa thông gió
  CCTV // Camera giám sát
  Generator // Máy phát điện
  Lighting // Chiếu sáng
  AutomaticDoor // Cửa cuốn / barrier
  FireExtinguisher // Bình chữa cháy
  Other // Thiết bị khác
}
